# DocuAgent GPU Dockerfile
# Base image with CUDA support
FROM nvidia/cuda:12.1.1-cudnn8-runtime-ubuntu22.04

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV CUDA_VISIBLE_DEVICES=0

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    python3-venv \
    git \
    wget \
    curl \
    build-essential \
    libopencv-dev \
    libgl1-mesa-glx \
    libglib2.0-0 \
    libsm6 \
    libxext6 \
    libxrender-dev \
    libgomp1 \
    libgcc-s1 \
    poppler-utils \
    tesseract-ocr \
    tesseract-ocr-eng \
    tesseract-ocr-mult \
    && rm -rf /var/lib/apt/lists/*

# Create symbolic link for python
RUN ln -s /usr/bin/python3 /usr/bin/python

# Set working directory
WORKDIR /app

# Copy requirements first for better caching
COPY requirements.txt .

# Install Python dependencies
RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel
RUN pip3 install --no-cache-dir -r requirements.txt

# Copy source code
COPY src/ ./src/
COPY configs/ ./configs/
COPY scripts/ ./scripts/
COPY pyproject.toml .

# Install DocuAgent in development mode
RUN pip3 install -e .

# Create necessary directories
RUN mkdir -p /app/.cache /app/weights /app/runs /app/debug /app/data /app/out

# Download and cache Hugging Face models
RUN python3 -c "
import os
os.environ['HF_HOME'] = '/app/.cache/huggingface'
from transformers import AutoTokenizer, AutoModel
try:
    # Download Qwen2-VL model components
    tokenizer = AutoTokenizer.from_pretrained('Qwen/Qwen2-VL-7B-Instruct', cache_dir='/app/.cache/huggingface')
    print('Downloaded Qwen2-VL tokenizer')
except Exception as e:
    print(f'Warning: Could not download Qwen2-VL model: {e}')
"

# Download and cache other models
RUN python3 -c "
import os
os.environ['HF_HOME'] = '/app/.cache/huggingface'
try:
    # Download sentence transformers
    from sentence_transformers import SentenceTransformer
    model = SentenceTransformer('all-MiniLM-L6-v2', cache_folder='/app/.cache/sentence_transformers')
    print('Downloaded sentence transformer model')
except Exception as e:
    print(f'Warning: Could not download sentence transformer: {e}')
"

# Download FastText language identification model
RUN python3 -c "
import os
import fasttext
os.makedirs('/app/.cache/fasttext', exist_ok=True)
try:
    model = fasttext.load_model('https://dl.fbaipublicfiles.com/fasttext/supervised-models/lid.176.bin')
    model.save_model('/app/.cache/fasttext/lid.176.bin')
    print('Downloaded FastText language ID model')
except Exception as e:
    print(f'Warning: Could not download FastText model: {e}')
"

# Set up environment
ENV PYTHONPATH=/app/src
ENV DOCUAGENT_CACHE_DIR=/app/.cache
ENV DOCUAGENT_WEIGHTS_DIR=/app/weights
ENV DOCUAGENT_RUNS_DIR=/app/runs
ENV DOCUAGENT_DEBUG_DIR=/app/debug

# Create entrypoint script
RUN echo '#!/bin/bash\n\
set -e\n\
\n\
# Activate virtual environment if it exists\n\
if [ -f "/app/venv/bin/activate" ]; then\n\
    source /app/venv/bin/activate\n\
fi\n\
\n\
# Set CUDA device\n\
if [ -n "$CUDA_DEVICE" ]; then\n\
    export CUDA_VISIBLE_DEVICES=$CUDA_DEVICE\n\
fi\n\
\n\
# Run the command\n\
exec "$@"' > /app/entrypoint.sh && chmod +x /app/entrypoint.sh

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]

# Default command
CMD ["python", "-m", "docuagent.cli", "--help"]

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python -c "import docuagent; print('DocuAgent is healthy')" || exit 1

# Expose ports (if needed for web interface)
EXPOSE 8000

# Labels
LABEL maintainer="DocuAgent Team"
LABEL description="DocuAgent with GPU support for document processing"
LABEL version="0.1.0"
